import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from openai import OpenAI

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_BASE_URL = os.getenv("OPENAI_BASE_URL", "https://openrouter.ai/api/v1")
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
os.environ["OPENAI_BASE_URL"] = OPENAI_BASE_URL

if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ù–µ—Ç BOT_TOKEN –≤ .env")
if not OPENAI_API_KEY:
    raise RuntimeError("‚ùå –ù–µ—Ç OPENAI_API_KEY –≤ .env")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL,
    default_headers={
        "HTTP-Referer": "https://t.me/your_bot_username",  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
        "X-Title": "AstroBot",
    },
)

user_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# === –§—É–Ω–∫—Ü–∏—è GPT-–∑–∞–ø—Ä–æ—Å–∞ ===
async def ask_gpt(prompt: str):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            timeout=60.0
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    buttons = [
        ["üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
        ["üåü –°–æ–≤–µ—Ç –¥–Ω—è –æ—Ç –∑–≤—ë–∑–¥"],
        ["‚ú® –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"],
        ["üí´ –°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ —É –∑–≤—ë–∑–¥"],
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=b) for b in row] for row in buttons],
        resize_keyboard=True
    )


# === /start ===
@dp.message(CommandStart())
async def start(message: types.Message):
    zodiac_buttons = [
        ["‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã"],
        ["‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞"],
        ["‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü"],
        ["‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã"],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=b) for b in row] for row in zodiac_buttons],
        resize_keyboard=True
    )
    await message.answer(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ø–æ–º–æ—â–Ω–∏–∫.\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        reply_markup=keyboard
    )


# === –í—ã–±–æ—Ä –∑–Ω–∞–∫–∞ ===
@dp.message(lambda m: any(z in m.text for z in [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]))
async def choose_zodiac(message: types.Message):
    user_data[message.from_user.id] = {"zodiac": message.text}
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –∑–Ω–∞–∫ ‚Äî {message.text}!\n–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
        reply_markup=main_menu()
    )


# === –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–æ –∑–≤—ë–∑–¥–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º) ===
@dp.message(lambda m: "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" in m.text)
async def horoscope_today(message: types.Message):
    zodiac = user_data.get(message.from_user.id, {}).get("zodiac", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    wait_msg = await message.answer("üî≠ –ó–≤—ë–∑–¥—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏—è‚Ä¶")
    await asyncio.sleep(1.8)
    await wait_msg.edit_text("‚ú® –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –æ–∫—Ä—É–∂–∞—é—Ç –∑–Ω–∞–∫‚Ä¶")
    await asyncio.sleep(1.8)
    await wait_msg.edit_text("üåå –ó–≤—ë–∑–¥—ã —É–∂–µ —à–µ–ø—á—É—Ç —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑‚Ä¶")

    prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac}."
    result = await ask_gpt(prompt)

    await wait_msg.edit_text(f"üîÆ {zodiac} ‚Äî —Ç–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{result}")
    await message.answer("–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")]],
        resize_keyboard=True
    ))


# === –°–æ–≤–µ—Ç –¥–Ω—è ===
@dp.message(lambda m: "–°–æ–≤–µ—Ç –¥–Ω—è" in m.text)
async def daily_advice(message: types.Message):
    zodiac = user_data.get(message.from_user.id, {}).get("zodiac", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    wait_msg = await message.answer("üî≠ –ó–≤—ë–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π‚Ä¶")
    await asyncio.sleep(2)
    await wait_msg.edit_text("üå† –°–æ–∑–≤–µ–∑–¥–∏—è –Ω–∞—Ö–æ–¥—è—Ç –æ—Ç–≤–µ—Ç‚Ä¶")

    prompt = f"–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac} —Å –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –Ω–æ—Ç–∫–æ–π."
    result = await ask_gpt(prompt)

    await wait_msg.edit_text(f"üåü –°–æ–≤–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è {zodiac}:\n\n{result}")
    await message.answer("–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")]],
        resize_keyboard=True
    ))


# === –°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ —É –∑–≤—ë–∑–¥ ===
@dp.message(lambda m: "–°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞" in m.text)
async def ask_topic(message: types.Message):
    keyboard = ReplyKeyboardBuilder()
    for topic in ["‚ù§Ô∏è –õ—é–±–æ–≤—å", "üíº –ë–∏–∑–Ω–µ—Å", "üè° –°–µ–º—å—è", "üí™ –ó–¥–æ—Ä–æ–≤—å–µ", "üöÄ –ö–∞—Ä—å–µ—Ä–∞"]:
        keyboard.button(text=topic)
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ç–∞ üåå:", reply_markup=keyboard.as_markup(resize_keyboard=True))


@dp.message(lambda m: any(x in m.text for x in ["–õ—é–±–æ–≤—å", "–ë–∏–∑–Ω–µ—Å", "–°–µ–º—å—è", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ö–∞—Ä—å–µ—Ä–∞"]))
async def give_topic_advice(message: types.Message):
    zodiac = user_data.get(message.from_user.id, {}).get("zodiac", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    topic = message.text.strip().split(" ")[-1]

    wait_msg = await message.answer("‚ú® –ó–∞–≥–ª—è–¥—ã–≤–∞—é –≤ –∫–∞—Ä—Ç—É –∑–≤—ë–∑–¥‚Ä¶")
    await asyncio.sleep(1.8)
    await wait_msg.edit_text("üåô –ü–ª–∞–Ω–µ—Ç—ã –æ–±—Å—É–∂–¥–∞—é—Ç —Ç–≤–æ—é —Å—É–¥—å–±—É‚Ä¶")

    prompt = f"–î–∞–π —Å–æ–≤–µ—Ç –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac} –ø–æ —Ç–µ–º–µ '{topic}', –∏—Å–ø–æ–ª—å–∑—É—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω."
    result = await ask_gpt(prompt)

    await wait_msg.edit_text(f"üí´ –°–æ–≤–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è {zodiac} ({topic}):\n\n{result}")
    await message.answer("–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")]],
        resize_keyboard=True
    ))


# === –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ===
@dp.message(lambda m: "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑" in m.text)
async def ask_personal(message: types.Message):
    await message.answer("‚ú® –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[message.from_user.id]["step"] = "name"


@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "name")
async def get_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    user_data[message.from_user.id]["step"] = "birth_date"
    await message.answer("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14.10.1995):")


@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "birth_date")
async def get_birth_date(message: types.Message):
    user_data[message.from_user.id]["birth_date"] = message.text
    user_data[message.from_user.id]["step"] = "birth_time"
    await message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 15:45):")


@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "birth_time")
async def get_birth_time(message: types.Message):
    user_data[message.from_user.id]["birth_time"] = message.text
    user_data[message.from_user.id]["step"] = "birth_place"
    await message.answer("üåç –£–∫–∞–∂–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")


@dp.message(lambda m: user_data.get(m.from_user.id, {}).get("step") == "birth_place")
async def get_birth_place(message: types.Message):
    info = user_data[message.from_user.id]
    info["birth_place"] = message.text
    user_data[message.from_user.id]["step"] = None

    wait_msg = await message.answer("ü™ê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É‚Ä¶")
    await asyncio.sleep(2)
    await wait_msg.edit_text("üåû –°–º–æ—Ç—Ä—é, –∫–∞–∫ –ø–ª–∞–Ω–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Å—É–¥—å–±—É‚Ä¶")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {info['name']}.\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_date']}\n"
        f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_time']}\n"
        f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_place']}\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã. –î–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑."
    )
    result = await ask_gpt(prompt)

    await wait_msg.edit_text(f"üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {info['name']}:\n\n{result}")
    await message.answer("–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")]],
        resize_keyboard=True
    ))


# === –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.message(lambda m: "–í–µ—Ä–Ω—É—Ç—å—Å—è" in m.text)
async def back_to_menu(message: types.Message):
    zodiac = user_data.get(message.from_user.id, {}).get("zodiac", "–¥—Ä—É–≥ –∑–≤—ë–∑–¥")
    await message.answer(f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é, {zodiac}!", reply_markup=main_menu())


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–≤—ë–∑–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

